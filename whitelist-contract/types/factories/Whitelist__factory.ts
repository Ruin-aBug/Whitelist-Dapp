/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Whitelist, WhitelistInterface } from "../Whitelist";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_maxWhitelistAddresses",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "addAddressToWhitelisted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "maxWhitelistAddresses",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numAddressesWhitelisted",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelistedAddress",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161030338038061030383398101604081905261002f91610048565b6000805460ff191660ff92909216919091179055610072565b60006020828403121561005a57600080fd5b815160ff8116811461006b57600080fd5b9392505050565b610282806100816000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634011d7cd14610051578063c30796ab14610075578063c346dbfa146100a8578063d47ac0f4146100b2575b600080fd5b60025461005e9060ff1681565b60405160ff90911681526020015b60405180910390f35b6100986100833660046101e9565b60016020526000908152604090205460ff1681565b604051901515815260200161006c565b6100b06100bf565b005b60005461005e9060ff1681565b3360009081526001602052604090205460ff16156101305760405162461bcd60e51b815260206004820152602360248201527f53656e6465722068617320616c7265616479206265656e2077686974656c69736044820152621d195960ea1b60648201526084015b60405180910390fd5b60005460025460ff91821691161061019e5760405162461bcd60e51b815260206004820152602b60248201527f4d6f7265206164647265737365732063616e742062652061646465642c206c6960448201526a1b5a5d081c995858da195960aa1b6064820152608401610127565b3360009081526001602081905260408220805460ff19168217905560028054919290916101cf90849060ff16610219565b92506101000a81548160ff021916908360ff160217905550565b6000602082840312156101fb57600080fd5b81356001600160a01b038116811461021257600080fd5b9392505050565b600060ff821660ff84168060ff0382111561024457634e487b7160e01b600052601160045260246000fd5b01939250505056fea2646970667358221220793ef0549b0e14283c51ec5dce0ad8bdabcc10c858ca951aca2bd517975914a264736f6c63430008090033";

type WhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Whitelist__factory extends ContractFactory {
  constructor(...args: WhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _maxWhitelistAddresses: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Whitelist> {
    return super.deploy(
      _maxWhitelistAddresses,
      overrides || {}
    ) as Promise<Whitelist>;
  }
  override getDeployTransaction(
    _maxWhitelistAddresses: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_maxWhitelistAddresses, overrides || {});
  }
  override attach(address: string): Whitelist {
    return super.attach(address) as Whitelist;
  }
  override connect(signer: Signer): Whitelist__factory {
    return super.connect(signer) as Whitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhitelistInterface {
    return new utils.Interface(_abi) as WhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Whitelist {
    return new Contract(address, _abi, signerOrProvider) as Whitelist;
  }
}
